{"version":3,"sources":["webpack:///./src/components/TagList/TagList.js","webpack:///./src/templates/tag-page.js","webpack:///./src/components/PostAbbrev/PostAbbrev.js","webpack:///./src/components/SEO/SEO.js"],"names":["TagList","tags","baseUrl","restProps","className","map","text","key","Tag","url","defaultProps","TagPageTemplate","pageContext","data","location","tag","allMarkdownRemark","edges","totalCount","siteTitle","site","siteMetadata","title","useLang","lang","homeLink","tagHeader","formatMessage","breadcrumbs","description","node","frontmatter","fields","slug","base","date","timeToRead","style","marginTop","pageQuery","PostAbbrev","excerptPart","tagsPart","excerpt","dangerouslySetInnerHTML","__html","margin","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","rel","formatDate","formatReadingTime","SEO","meta","keywords","metaDescription","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join"],"mappings":"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","file":"component---src-templates-tag-page-js-737099b1cf303a57a2ba.js","sourcesContent":["import './TagList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nfunction TagList({ tags, baseUrl, ...restProps }) {\n  return (\n    <ul className=\"tag-ul\" {...restProps}>\n      {tags.map(text => (\n        <li key={text}>\n          <Tag text={text} url={`${baseUrl}/${text}`} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nTagList.propTypes = {\n  tags: PropTypes.array.isRequired,\n  baseUrl: PropTypes.string,\n};\n\nTagList.defaultProps = {\n  baseUrl: '',\n};\n\nexport default TagList;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { graphql } from 'gatsby';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport Bio from 'components/Bio';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nconst TagPageTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n\n  const { lang, homeLink } = useLang();\n\n  const tagHeader = formatMessage('tfTagHeader', totalCount, tag);\n\n  return (\n    <Layout\n      location={location}\n      title={siteTitle}\n      breadcrumbs={[{ text: formatMessage('tTags'), url: `${homeLink}tags` }, { text: tag }]}\n    >\n      <SEO title={tagHeader} description={tagHeader} />\n      <h1>{tagHeader}</h1>\n      <main>\n        {edges.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return (\n            <PostAbbrev\n              key={node.fields.slug}\n              base={homeLink}\n              lang={lang}\n              slug={node.fields.slug}\n              date={node.frontmatter.date}\n              timeToRead={node.timeToRead}\n              title={title}\n            />\n          );\n        })}\n      </main>\n      <div style={{ marginTop: 50 }} />\n      <aside>\n        <Bio />\n      </aside>\n    </Layout>\n  );\n};\n\nTagPageTemplate.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n              langKey: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }).isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default TagPageTemplate;\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String, $langKey: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } }, fields: { langKey: { eq: $langKey } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nfunction SEO({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n"],"sourceRoot":""}