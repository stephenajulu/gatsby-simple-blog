{"version":3,"sources":["webpack:///./src/pages/404.js","webpack:///./src/components/SEO/SEO.js"],"names":["NotFoundPage","data","location","siteTitle","site","siteMetadata","title","formatMessage","pageQuery","SEO","description","meta","keywords","lang","useLang","metaDescription","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps"],"mappings":"6SAAA,8GAyBeA,UAjBf,YAA2C,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SACtBC,EAAYF,EAAKG,KAAKC,aAAaC,MAEzC,OACE,kBAAC,IAAD,CAAQJ,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAOC,YAAc,eAC1B,4BAAKA,YAAc,cACnB,2BAAIA,YAAc,kBAYjB,IAAMC,EAAS,c,iICdtB,SAASC,EAAT,GAAsD,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUN,EAAS,EAATA,MAClCF,EAD2C,OAC3CA,KAeAS,EAASC,cAATD,KAEFE,EAAkBL,GAAeN,EAAKC,aAAaK,YAEzD,OACE,kBAACM,EAAA,EAAD,CACEC,eAAgB,CACdJ,KAAMA,GAAQT,EAAKC,aAAaQ,MAElCP,MAAOA,EACPY,cAAa,QAAUd,EAAKC,aAAaC,MACzCK,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASd,GAEX,CACEe,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAShB,EAAKC,aAAaiB,QAE7B,CACEH,KAAK,gBACLC,QAASd,GAEX,CACEa,KAAK,sBACLC,QAASL,IAGVQ,OACCX,EAASY,OAAS,EACd,CACEL,KAAK,WACLC,QAASR,EAASa,KAAT,OAEX,IAELF,OAAOZ,KAYhBF,EAAIiB,aAAe,CACjBf,KAAM,GACNC,SAAU,GACVF,YAAa,IAGAD","file":"component---src-pages-404-js-e4add642c47d4b282dee.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport { formatMessage } from '../utils/i18n';\n\nfunction NotFoundPage({ data, location }) {\n  const siteTitle = data.site.siteMetadata.title;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formatMessage('t404Title')} />\n      <h1>{formatMessage('t404Title')}</h1>\n      <p>{formatMessage('t404Content')}</p>\n    </Layout>\n  );\n}\n\nNotFoundPage.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nfunction SEO({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n"],"sourceRoot":""}