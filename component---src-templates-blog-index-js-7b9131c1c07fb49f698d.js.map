{"version":3,"sources":["webpack:///./src/components/TagList/TagList.js","webpack:///./src/templates/blog-index.js","webpack:///./src/components/PostAbbrev/PostAbbrev.js","webpack:///./src/components/SEO/SEO.js"],"names":["TagList","tags","baseUrl","restProps","className","map","text","key","Tag","url","defaultProps","BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","useLang","lang","homeLink","formatMessage","keywords","totalCount","node","frontmatter","fields","slug","base","date","timeToRead","excerpt","description","pageQuery","PostAbbrev","excerptPart","tagsPart","dangerouslySetInnerHTML","__html","style","margin","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","rel","formatDate","formatReadingTime","SEO","meta","metaDescription","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join"],"mappings":"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","file":"component---src-templates-blog-index-js-7b9131c1c07fb49f698d.js","sourcesContent":["import './TagList.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nfunction TagList({ tags, baseUrl, ...restProps }) {\n  return (\n    <ul className=\"tag-ul\" {...restProps}>\n      {tags.map(text => (\n        <li key={text}>\n          <Tag text={text} url={`${baseUrl}/${text}`} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nTagList.propTypes = {\n  tags: PropTypes.array.isRequired,\n  baseUrl: PropTypes.string,\n};\n\nTagList.defaultProps = {\n  baseUrl: '',\n};\n\nexport default TagList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql } from 'gatsby';\n\nimport Bio from 'components/Bio';\nimport Layout from 'components/Layout';\nimport SEO from 'components/SEO';\nimport PostAbbrev from 'components/PostAbbrev';\nimport { useLang } from 'context/LanguageContext';\nimport { formatMessage } from 'utils/i18n';\n\nfunction BlogIndex({ data, location }) {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  const { lang, homeLink } = useLang();\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={formatMessage('tIndTitle')} keywords={formatMessage('taIndKeywords')} />\n      <aside>\n        <Bio />\n      </aside>\n      <h4>{formatMessage('tfIndCountPosts', data.allMarkdownRemark.totalCount)}</h4>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <PostAbbrev\n            lang={lang}\n            base={homeLink}\n            key={node.fields.slug}\n            slug={node.fields.slug}\n            date={node.frontmatter.date}\n            timeToRead={node.timeToRead}\n            title={title}\n            excerpt={node.frontmatter.description || node.excerpt}\n            tags={node.frontmatter.tags}\n          />\n        );\n      })}\n    </Layout>\n  );\n}\n\nBlogIndex.propTypes = {\n  data: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n};\n\nBlogIndex.defaultProps = {};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query($langKey: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          fields {\n            slug\n            langKey\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from 'utils/typography';\nimport { formatReadingTime } from 'utils/helpers';\nimport { formatDate } from 'utils/i18n';\n\nimport TagList from '../TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags, base }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl={`${base}tags`} />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${formatDate(date)} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n  base: PropTypes.string,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n  base: '',\n};\n\nexport default PostAbbrev;\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { useLang } from 'context/LanguageContext';\n\nfunction SEO({ description, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            lang\n          }\n        }\n      }\n    `,\n  );\n\n  const { lang } = useLang();\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: lang || site.siteMetadata.lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : [],\n        )\n        .concat(meta)}\n    />\n  );\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n};\n\nSEO.defaultProps = {\n  meta: [],\n  keywords: [],\n  description: '',\n};\n\nexport default SEO;\n"],"sourceRoot":""}